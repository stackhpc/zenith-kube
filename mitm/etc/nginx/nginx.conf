#####
## Template used to generate Nginx config with gomplate
#####

load_module  modules/ngx_http_js_module.so;

# Run Nginx in the foreground
daemon  off;
# Run worker processes as the nginx user
user  nginx;

worker_processes  auto;

error_log  /var/log/nginx/error.log  {{ getenv "KUBE_APISERVER_MITM_LOG_LEVEL" "notice" }};
pid  /var/run/nginx/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include  /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile  on;
    keepalive_timeout  65;

    # Decide the value of the connection header
    # This is required to support proxying websockets
	map  $http_upgrade  $connection_upgrade {
        default  upgrade;
        ''  close;
    }

    # Get the authenticated user and groups from the certificate that was validated downstream
    js_import  /etc/nginx/js/kubernetes_auth.js;
    js_set  $kubernetes_user    kubernetes_auth.user;
    js_set  $kubernetes_groups  kubernetes_auth.groups;

    server {
        listen  {{ getenv "KUBE_APISERVER_MITM_LISTEN_ADDRESS" "*" }}:{{ getenv "KUBE_APISERVER_MITM_LISTEN_PORT" "8080" }};
        server_name   _;

		proxy_http_version  1.1;
        # Don't impose a maximum size on the client body
        client_max_body_size  0;
		client_body_buffer_size  128k;
        # Set a short connect timeout so we bail early when the API server is unreachable
		proxy_connect_timeout  5;
        # Set a long read timeout so that watch and follow work as expected
		proxy_read_timeout  31536000;
        # Turn off buffering - just send data directly back to the client
        proxy_buffering  off;

        # Set the SSL client certificate for connecting to the upstream
        proxy_ssl_certificate  {{ getenv "KUBE_APISERVER_MITM_CLIENT_CERTIFICATE_PATH" | required "No client certificate path given." }};
	    proxy_ssl_certificate_key  {{ getenv "KUBE_APISERVER_MITM_CLIENT_CERTIFICATE_KEY_PATH" | required "No client certificate key path given." }};
    
        # Set headers for the proxy request
        proxy_set_header  Host  $host;
		proxy_set_header  X-Real-IP  $remote_addr;
		proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;
        # Enable the proxying of websocket connections
        proxy_set_header  Upgrade  $http_upgrade;
        proxy_set_header  Connection  $connection_upgrade;
		# Set any authentication headers discovered from a certificate
        proxy_set_header  {{ getenv "KUBE_APISERVER_MITM_USER_HEADER" "X-Remote-User" }}  $kubernetes_user;
	    proxy_set_header  {{ getenv "KUBE_APISERVER_MITM_GROUP_HEADER" "X-Remote-Group" }}  $kubernetes_groups;

        location / {
            proxy_pass https://{{ getenv "KUBE_APISERVER_MITM_UPSTREAM_ADDRESS" | required "No upstream address given." }}:{{ getenv "KUBE_APISERVER_MITM_UPSTREAM_PORT" "6443" }};
        }
    }
}
